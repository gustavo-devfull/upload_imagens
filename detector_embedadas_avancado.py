#!/usr/bin/env python3
"""
üîç DETECTOR AVAN√áADO DE IMAGENS EMBEDADAS
Tenta diferentes m√©todos para acessar imagens que est√£o embedadas no Excel
"""

import openpyxl
import openpyxl.utils
import os
import logging
from typing import List, Dict, Optional
import zipfile
import xml.etree.ElementTree as ET

# Configurar logging
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

def detectar_imagens_embedadas_avancado(arquivo):
    """Detecta imagens usando m√©todos avan√ßados"""
    
    if not os.path.exists(arquivo):
        print(f"‚ùå Arquivo {arquivo} n√£o existe!")
        return
    
    print(f"\nüîç DETECTOR AVAN√áADO DE IMAGENS EMBEDADAS")
    print(f"üìÅ Arquivo: {arquivo}")
    print("=" * 70)
    
    try:
        # M√âTODO 1: An√°lise direta do arquivo ZIP (Excel √© um ZIP)
        print(f"\nüîç M√âTODO 1: An√°lise do arquivo como ZIP")
        try:
            with zipfile.ZipFile(arquivo, 'r') as zip_file:
                file_list = zip_file.namelist()
                print(f"   ‚Ä¢ Total de arquivos no ZIP: {len(file_list)}")
                
                # Procurar por arquivos de imagem
                image_files = [f for f in file_list if any(f.endswith(ext) for ext in ['.png', '.jpg', '.jpeg', '.gif', '.bmp'])]
                print(f"   ‚Ä¢ Arquivos de imagem encontrados: {len(image_files)}")
                if image_files:
                    for img_file in image_files:
                        print(f"     - {img_file}")
                
                # Procurar por drawings
                drawing_files = [f for f in file_list if 'drawing' in f.lower()]
                print(f"   ‚Ä¢ Arquivos de drawing: {len(drawing_files)}")
                if drawing_files:
                    for draw_file in drawing_files:
                        print(f"     - {draw_file}")
                        
                        # Ler conte√∫do do drawing
                        try:
                            content = zip_file.read(draw_file)
                            print(f"       Tamanho: {len(content)} bytes")
                            
                            # Procurar por refer√™ncias de imagem
                            if b'image' in content.lower():
                                print(f"       ‚úÖ Cont√©m refer√™ncias a imagens")
                            if b'pic:' in content.lower():
                                print(f"       ‚úÖ Cont√©m elementos de imagem")
                        except Exception as e:
                            print(f"       ‚ùå Erro ao ler drawing: {e}")
                
        except Exception as e:
            print(f"   ‚ùå Erro ao analisar como ZIP: {e}")
        
        # M√âTODO 2: Carregar com openpyxl e investigar profundamente
        print(f"\nüîç M√âTODO 2: Investiga√ß√£o profunda com openpyxl")
        workbook = openpyxl.load_workbook(arquivo)
        worksheet = workbook.active
        
        print(f"   ‚Ä¢ Planilha: {worksheet.title}")
        print(f"   ‚Ä¢ Dimens√µes: {worksheet.max_row} linhas x {worksheet.max_column} colunas")
        
        # Verificar _images
        print(f"   ‚Ä¢ worksheet._images: {len(worksheet._images)}")
        
        # Verificar _drawing
        if hasattr(worksheet, '_drawing'):
            print(f"   ‚Ä¢ worksheet._drawing: {worksheet._drawing}")
        
        # Verificar legacy_drawing
        if hasattr(worksheet, 'legacy_drawing'):
            print(f"   ‚Ä¢ worksheet.legacy_drawing: {worksheet.legacy_drawing}")
        
        # M√âTODO 3: Verificar workbook._images
        print(f"\nüîç M√âTODO 3: Verifica√ß√£o de workbook._images")
        if hasattr(workbook, '_images'):
            print(f"   ‚Ä¢ workbook._images: {len(workbook._images) if workbook._images else 0}")
        else:
            print(f"   ‚ùå workbook n√£o tem atributo _images")
        
        # M√âTODO 4: Verificar workbook._drawings
        print(f"\nüîç M√âTODO 4: Verifica√ß√£o de workbook._drawings")
        if hasattr(workbook, '_drawings'):
            print(f"   ‚Ä¢ workbook._drawings: {len(workbook._drawings) if workbook._drawings else 0}")
        else:
            print(f"   ‚ùå workbook n√£o tem atributo _drawings")
        
        # M√âTODO 5: Verificar todas as planilhas
        print(f"\nüîç M√âTODO 5: Verifica√ß√£o de todas as planilhas")
        for sheet_name in workbook.sheetnames:
            sheet = workbook[sheet_name]
            print(f"   ‚Ä¢ Planilha '{sheet_name}':")
            print(f"     - _images: {len(sheet._images)}")
            if hasattr(sheet, '_drawing'):
                print(f"     - _drawing: {sheet._drawing}")
            if hasattr(sheet, 'legacy_drawing'):
                print(f"     - legacy_drawing: {sheet.legacy_drawing}")
        
        # M√âTODO 6: Verificar c√©lulas espec√≠ficas da coluna H
        print(f"\nüîç M√âTODO 6: Verifica√ß√£o detalhada da coluna H")
        for row in range(1, min(worksheet.max_row + 1, 20)):
            cell_h = worksheet[f'H{row}']
            cell_a = worksheet[f'A{row}']
            
            if cell_h.value or cell_a.value:
                print(f"   Linha {row}:")
                print(f"     - H{row}: '{cell_h.value}'")
                print(f"     - A{row}: '{cell_a.value}'")
                
                # Verificar atributos da c√©lula
                cell_attrs = [attr for attr in dir(cell_h) if not attr.startswith('_') and not callable(getattr(cell_h, attr))]
                print(f"     - Atributos da c√©lula H{row}: {cell_attrs}")
                
                # Verificar se h√° imagens associadas
                for attr in ['_image', '_images', 'image', 'images']:
                    if hasattr(cell_h, attr):
                        value = getattr(cell_h, attr)
                        print(f"     - {attr}: {value}")
        
        # M√âTODO 7: Verificar workbook._rels
        print(f"\nüîç M√âTODO 7: Verifica√ß√£o de relacionamentos")
        if hasattr(workbook, '_rels'):
            print(f"   ‚Ä¢ workbook._rels: {len(workbook._rels) if workbook._rels else 0}")
            if workbook._rels:
                for rel_id, rel in workbook._rels.items():
                    if 'image' in str(rel).lower() or 'drawing' in str(rel).lower():
                        print(f"     - {rel_id}: {rel}")
        
        # M√âTODO 8: Verificar worksheet._rels
        print(f"\nüîç M√âTODO 8: Verifica√ß√£o de relacionamentos da planilha")
        if hasattr(worksheet, '_rels'):
            print(f"   ‚Ä¢ worksheet._rels: {len(worksheet._rels) if worksheet._rels else 0}")
            if worksheet._rels:
                for rel_id, rel in worksheet._rels.items():
                    if 'image' in str(rel).lower() or 'drawing' in str(rel).lower():
                        print(f"     - {rel_id}: {rel}")
        
        # M√âTODO 9: Verificar workbook._archive
        print(f"\nüîç M√âTODO 9: Verifica√ß√£o do arquivo interno")
        if hasattr(workbook, '_archive'):
            print(f"   ‚Ä¢ workbook._archive: {type(workbook._archive)}")
            if workbook._archive:
                try:
                    file_list = workbook._archive.namelist()
                    print(f"   ‚Ä¢ Arquivos no archive: {len(file_list)}")
                    
                    # Procurar por imagens
                    image_files = [f for f in file_list if any(f.endswith(ext) for ext in ['.png', '.jpg', '.jpeg', '.gif', '.bmp'])]
                    if image_files:
                        print(f"   ‚Ä¢ Imagens no archive: {image_files}")
                except Exception as e:
                    print(f"   ‚ùå Erro ao acessar archive: {e}")
        
        workbook.close()
        
        # M√âTODO 10: An√°lise XML direta
        print(f"\nüîç M√âTODO 10: An√°lise XML direta")
        try:
            with zipfile.ZipFile(arquivo, 'r') as zip_file:
                # Procurar por worksheet XML
                worksheet_files = [f for f in zip_file.namelist() if 'worksheet' in f and f.endswith('.xml')]
                print(f"   ‚Ä¢ Arquivos worksheet XML: {len(worksheet_files)}")
                
                for ws_file in worksheet_files:
                    try:
                        content = zip_file.read(ws_file)
                        print(f"   ‚Ä¢ Analisando {ws_file}")
                        
                        # Procurar por elementos de imagem
                        if b'drawing' in content:
                            print(f"     ‚úÖ Cont√©m elementos de drawing")
                        if b'pic:' in content:
                            print(f"     ‚úÖ Cont√©m elementos de imagem")
                        if b'image' in content:
                            print(f"     ‚úÖ Cont√©m refer√™ncias de imagem")
                            
                        # Tentar parsear XML
                        try:
                            root = ET.fromstring(content)
                            # Procurar por elementos de drawing
                            drawings = root.findall('.//{http://schemas.openxmlformats.org/spreadsheetml/2006/main}drawing')
                            if drawings:
                                print(f"     ‚úÖ Encontrados {len(drawings)} elementos de drawing")
                        except Exception as e:
                            print(f"     ‚ùå Erro ao parsear XML: {e}")
                            
                    except Exception as e:
                        print(f"   ‚ùå Erro ao ler {ws_file}: {e}")
                        
        except Exception as e:
            print(f"   ‚ùå Erro na an√°lise XML: {e}")
        
        # RESULTADO FINAL
        print(f"\n{'='*70}")
        print("üìã DIAGN√ìSTICO FINAL:")
        print("=" * 70)
        
        # Recarregar para verificar novamente
        workbook = openpyxl.load_workbook(arquivo)
        worksheet = workbook.active
        
        total_images = len(worksheet._images)
        print(f"üìä Total de imagens detectadas: {total_images}")
        
        if total_images > 0:
            print("‚úÖ IMAGENS ENCONTRADAS!")
            print("   ‚Ä¢ O sistema detectou imagens embedadas")
            print("   ‚Ä¢ Problema pode estar na l√≥gica de posicionamento")
        else:
            print("‚ùå NENHUMA IMAGEM DETECTADA")
            print("   ‚Ä¢ As imagens podem estar em formato n√£o suportado")
            print("   ‚Ä¢ Ou podem estar corrompidas")
            print("   ‚Ä¢ Ou podem estar em uma planilha diferente")
        
        workbook.close()
        
    except Exception as e:
        print(f"‚ùå Erro geral: {e}")
        import traceback
        traceback.print_exc()

def main():
    """Fun√ß√£o principal"""
    
    print("üîç DETECTOR AVAN√áADO DE IMAGENS EMBEDADAS")
    print("=" * 70)
    
    arquivo = "produtos_novos.xlsx"
    detectar_imagens_embedadas_avancado(arquivo)

if __name__ == "__main__":
    main()

