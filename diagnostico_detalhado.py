#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Script de diagn√≥stico detalhado para investigar por que as imagens n√£o est√£o sendo detectadas
"""

import openpyxl
import os
import logging

# Configura√ß√£o de logging
logging.basicConfig(level=logging.DEBUG, format='%(asctime)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)

def diagnosticar_imagens_detalhado(file_path):
    """Diagn√≥stico detalhado das imagens"""
    print(f"üîç DIAGN√ìSTICO DETALHADO: {file_path}")
    print("=" * 60)
    
    try:
        workbook = openpyxl.load_workbook(file_path)
        worksheet = workbook.active
        
        print(f"üìä Planilha: {worksheet.title}")
        print(f"üìè Dimens√µes: {worksheet.max_row} linhas x {worksheet.max_column} colunas")
        print()
        
        # Analisa todas as imagens
        print("üñºÔ∏è AN√ÅLISE DETALHADA DAS IMAGENS:")
        print(f"Total de imagens encontradas: {len(worksheet._images)}")
        
        if len(worksheet._images) == 0:
            print("‚ùå NENHUMA IMAGEM ENCONTRADA!")
            print()
            print("üîç INVESTIGANDO POSS√çVEIS CAUSAS:")
            
            # Verifica se h√° outras planilhas
            print(f"üìã Total de planilhas: {len(workbook.worksheets)}")
            for i, sheet in enumerate(workbook.worksheets):
                print(f"  Planilha {i+1}: {sheet.title} - {len(sheet._images)} imagens")
            
            # Verifica se h√° objetos de desenho
            print(f"üé® Objetos de desenho na planilha ativa: {len(worksheet._drawings)}")
            
            # Verifica se h√° formas
            print(f"üî∑ Formas na planilha ativa: {len(worksheet._shapes)}")
            
        else:
            print("‚úÖ IMAGENS ENCONTRADAS!")
            print()
            
            for i, image in enumerate(worksheet._images):
                print(f"üñºÔ∏è Imagem {i+1}:")
                print(f"  Tipo: {type(image)}")
                print(f"  M√≥dulo: {image.__class__.__module__}")
                
                # Analisa o anchor
                anchor = image.anchor
                print(f"  Anchor: {anchor}")
                print(f"  Tipo do anchor: {type(anchor)}")
                
                # Tenta diferentes m√©todos para obter posi√ß√£o
                row = None
                col = None
                
                print("  üîç Tentando determinar posi√ß√£o:")
                
                # M√©todo 1: _from.row e _from.col
                if hasattr(anchor, '_from'):
                    print(f"    _from existe: {anchor._from}")
                    print(f"    Tipo _from: {type(anchor._from)}")
                    
                    if hasattr(anchor._from, 'row') and hasattr(anchor._from, 'col'):
                        row = anchor._from.row + 1
                        col = anchor._from.col + 1
                        print(f"    ‚úÖ Posi√ß√£o via _from.row/col: {col}{row}")
                    elif isinstance(anchor._from, tuple) and len(anchor._from) >= 2:
                        row = anchor._from[0] + 1
                        col = anchor._from[1] + 1
                        print(f"    ‚úÖ Posi√ß√£o via _from tuple: {col}{row}")
                    else:
                        print(f"    ‚ùå _from n√£o tem row/col ou n√£o √© tuple")
                
                # M√©todo 2: row e col diretos
                if hasattr(anchor, 'row') and hasattr(anchor, 'col'):
                    row = anchor.row + 1
                    col = anchor.col + 1
                    print(f"    ‚úÖ Posi√ß√£o via anchor.row/col: {col}{row}")
                
                # M√©todo 3: Propriedades alternativas
                for attr in ['row', 'col', 'left', 'top', 'right', 'bottom']:
                    if hasattr(anchor, attr):
                        value = getattr(anchor, attr)
                        print(f"    üìç anchor.{attr}: {value}")
                
                if row and col:
                    col_letter = openpyxl.utils.get_column_letter(col)
                    print(f"  üìç Posi√ß√£o final: {col_letter}{row}")
                    
                    # Verifica se est√° na coluna H
                    if col == 8:  # H = 8
                        print(f"  ‚úÖ Est√° na coluna PHOTO (H)")
                    else:
                        print(f"  ‚ùå Est√° na coluna {col_letter}, n√£o na PHOTO (H)")
                    
                    # Verifica se est√° a partir da linha 4
                    if row >= 4:
                        print(f"  ‚úÖ Est√° a partir da linha 4")
                    else:
                        print(f"  ‚ùå Est√° antes da linha 4")
                        
                    # Verifica se h√° REF correspondente
                    ref_value = worksheet[f'A{row}'].value
                    if ref_value:
                        print(f"  üîç REF correspondente: {ref_value}")
                    else:
                        print(f"  ‚ùå Nenhuma REF na linha {row}")
                else:
                    print(f"  ‚ùå N√£o foi poss√≠vel determinar a posi√ß√£o")
                
                print()
        
        # Analisa coluna H especificamente
        print("üì∏ AN√ÅLISE DA COLUNA H:")
        for row in range(1, min(10, worksheet.max_row + 1)):
            cell_value = worksheet[f'H{row}'].value
            if cell_value:
                print(f"  H{row}: {str(cell_value)[:50]}")
        
        workbook.close()
        
    except Exception as e:
        print(f"‚ùå Erro no diagn√≥stico: {e}")
        logger.error(f"Erro no diagn√≥stico detalhado: {e}")

def main():
    """Fun√ß√£o principal"""
    # Lista arquivos Excel
    excel_files = [f for f in os.listdir('.') if f.endswith('.xlsx')]
    
    print("üìÅ Arquivos Excel dispon√≠veis:")
    for i, file in enumerate(excel_files, 1):
        print(f"  {i}. {file}")
    
    print()
    
    # Diagnostica cada arquivo
    for excel_file in excel_files:
        diagnosticar_imagens_detalhado(excel_file)
        print("\n" + "="*60 + "\n")

if __name__ == "__main__":
    main()
