#!/usr/bin/env python3
"""
üöÄ SISTEMA FLASK SEGUINDO ORIENTA√á√ïES FTP INICIAIS
Sistema que segue exatamente as configura√ß√µes FTP j√° estabelecidas no projeto
"""

import os
import sys
import tempfile
import logging
import ftplib
from flask import Flask, request, jsonify
from werkzeug.utils import secure_filename
from datetime import datetime

# Importa o detector integrado
try:
    from detector_integrado import DetectorImagensIntegrado
    DETECTOR_INTEGRADO_AVAILABLE = True
except ImportError as e:
    print(f"‚ö†Ô∏è Detector integrado n√£o dispon√≠vel: {e}")
    DETECTOR_INTEGRADO_AVAILABLE = False

# Configurar logging
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# Configura√ß√£o Flask
app = Flask(__name__)
app.config['MAX_CONTENT_LENGTH'] = 50 * 1024 * 1024  # 50MB max file size

# Diret√≥rio para uploads tempor√°rios
UPLOAD_FOLDER = tempfile.gettempdir()
ALLOWED_EXTENSIONS = {'xlsx'}

# CONFIGURA√á√ïES FTP SEGUINDO ORIENTA√á√ïES INICIAIS DO PROJETO
FTP_CONFIG = {
    'host': '46.202.90.62',
    'port': 21,
    'user': 'u715606397.ideolog.ia.br',
    'password': ']X9CC>t~ihWhdzNq',
    'upload_dir': 'public_html/images/products/',
    'timeout': 300
}

# URLs seguindo orienta√ß√µes iniciais
URLS_CONFIG = {
    'domain': 'https://ideolog.ia.br',
    'images_base': 'https://ideolog.ia.br/images/products/',
    'api_base': 'https://ideolog.ia.br/upload.php'
}

# REFs inv√°lidas seguindo orienta√ß√µes iniciais
INVALID_REFS = {
    'TOTAL', 'SUBTOTAL', 'SUM', 'COUNT', 'AVERAGE', 'MAX', 'MIN',
    'TOTAIS', 'SUBTOTAIS', 'SOMA', 'CONTAGEM', 'M√âDIA', 'M√ÅXIMO', 'M√çNIMO',
    'TOTAL GERAL', 'TOTAL PARCIAL', 'RESUMO', 'SUMMARY'
}

def allowed_file(filename):
    """Verifica se o arquivo tem extens√£o permitida"""
    return '.' in filename and \
           filename.rsplit('.', 1)[1].lower() in ALLOWED_EXTENSIONS

class FTPUploaderOrientacoes:
    def __init__(self, config):
        self.config = config
        self.connection = None
    
    def conectar(self):
        """Conecta ao servidor FTP seguindo orienta√ß√µes iniciais"""
        try:
            logger.info(f"üîó Conectando ao FTP: {self.config['host']}")
            self.connection = ftplib.FTP()
            self.connection.connect(self.config['host'], self.config['port'])
            self.connection.login(self.config['user'], self.config['password'])
            
            # Criar diret√≥rios seguindo estrutura inicial
            self._criar_diretorios()
            
            logger.info("‚úÖ Conectado ao FTP com sucesso!")
            return True
        except Exception as e:
            logger.error(f"‚ùå Erro ao conectar FTP: {e}")
            return False
    
    def _criar_diretorios(self):
        """Cria diret√≥rios seguindo estrutura inicial do projeto"""
        try:
            # Criar public_html se n√£o existir
            try:
                self.connection.mkd('public_html')
                logger.debug("Diret√≥rio 'public_html' criado")
            except:
                logger.debug("Diret√≥rio 'public_html' j√° existe")
            
            # Criar images dentro de public_html
            try:
                self.connection.cwd('public_html')
                self.connection.mkd('images')
                logger.debug("Diret√≥rio 'images' criado")
            except:
                logger.debug("Diret√≥rio 'images' j√° existe")
            
            # Criar products dentro de images
            try:
                self.connection.cwd('images')
                self.connection.mkd('products')
                logger.debug("Diret√≥rio 'products' criado")
            except:
                logger.debug("Diret√≥rio 'products' j√° existe")
            
            # Volta para raiz
            self.connection.cwd('/')
            
        except Exception as e:
            logger.warning(f"Erro ao criar diret√≥rios: {e}")
    
    def desconectar(self):
        """Desconecta do servidor FTP"""
        if self.connection:
            try:
                self.connection.quit()
                logger.info("üîå Desconectado do FTP")
            except Exception as e:
                logger.warning(f"‚ö†Ô∏è Erro ao desconectar FTP: {e}")
    
    def upload_imagem(self, image_data: bytes, filename: str) -> bool:
        """Faz upload de uma imagem para o FTP seguindo orienta√ß√µes iniciais"""
        try:
            if not self.connection:
                logger.error("‚ùå N√£o conectado ao FTP!")
                return False
            
            logger.info(f"üì§ Upload: {filename}")
            
            # Criar arquivo tempor√°rio
            temp_path = f"/tmp/{filename}"
            with open(temp_path, 'wb') as f:
                f.write(image_data)
            
            # Garantir que estamos no diret√≥rio correto
            try:
                self.connection.cwd('/')
                logger.debug("Voltou para diret√≥rio raiz")
            except Exception as e:
                logger.warning(f"Erro ao voltar para raiz: {e}")
            
            # Caminho completo seguindo estrutura inicial
            remote_path = f"public_html/images/products/{filename}"
            
            logger.debug(f"Fazendo upload para: {remote_path}")
            
            # Fazer upload para FTP
            with open(temp_path, 'rb') as f:
                self.connection.storbinary(f'STOR {remote_path}', f)
            
            # Verificar se o arquivo foi criado
            try:
                self.connection.cwd('public_html/images/products')
                files_after = self.connection.nlst()
                if filename in files_after:
                    logger.info(f"   ‚úÖ Upload confirmado: {filename} encontrado no servidor")
                else:
                    logger.warning(f"   ‚ö†Ô∏è Upload n√£o confirmado: {filename} n√£o encontrado no servidor")
                
                # Volta para raiz
                self.connection.cwd('/')
            except Exception as e:
                logger.warning(f"Erro ao verificar upload: {e}")
            
            # Remover arquivo tempor√°rio
            os.remove(temp_path)
            
            logger.info(f"   ‚úÖ Upload bem-sucedido: {remote_path}")
            logger.info(f"   üåê Dispon√≠vel em: {URLS_CONFIG['images_base']}{filename}")
            return True
            
        except Exception as e:
            logger.error(f"   ‚ùå Erro no upload {filename}: {e}")
            import traceback
            traceback.print_exc()
            return False

def extrair_imagens_do_excel(file_path: str) -> list:
    """Extrai imagens de um arquivo Excel seguindo orienta√ß√µes iniciais"""
    import zipfile
    
    logger.info(f"üîç Extraindo imagens de: {file_path}")
    images_extracted = []
    
    try:
        with zipfile.ZipFile(file_path, 'r') as zf:
            # Listar arquivos de m√≠dia
            media_files = [name for name in zf.namelist() if name.startswith('xl/media/') and name.endswith(('.jpg', '.jpeg', '.png'))]
            logger.info(f"üñºÔ∏è Arquivos de m√≠dia encontrados: {len(media_files)}")
            
            # Obter posi√ß√µes das imagens usando detector integrado
            positions = []
            if DETECTOR_INTEGRADO_AVAILABLE:
                try:
                    detector = DetectorImagensIntegrado(debug_mode=False)
                    positions = detector.detectar_imagens(file_path, target_columns=['H'], start_row=4, ref_column='A')
                except Exception as e:
                    logger.warning(f"Erro ao obter posi√ß√µes: {e}")
            
            # Extrair imagens
            for i, media_file in enumerate(media_files):
                image_filename = os.path.basename(media_file)
                
                # Ler dados da imagem
                with zf.open(media_file) as img_file:
                    image_data = img_file.read()
                
                # Obter informa√ß√µes da posi√ß√£o se dispon√≠vel
                position_info = {}
                if i < len(positions):
                    pos = positions[i]
                    position_info = {
                        'ref': pos['ref'],
                        'position': f"{pos['col']}{pos['row']}",
                        'col': pos['col'],
                        'row': pos['row']
                    }
                
                # Criar nome seguindo orienta√ß√µes iniciais: REF.jpg
                if position_info.get('ref'):
                    output_filename = f"{position_info['ref']}.jpg"
                else:
                    # Fallback se n√£o tiver REF
                    timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
                    output_filename = f"imagem_{i+1}_{timestamp}.jpg"
                
                image_info = {
                    'original_filename': image_filename,
                    'ftp_filename': output_filename,
                    'image_data': image_data,  # Mant√©m para upload FTP
                    'file_size': len(image_data),
                    'index': i + 1,
                    **position_info
                }
                
                images_extracted.append(image_info)
                
                logger.info(f"   ‚úÖ Imagem {i+1} extra√≠da:")
                logger.info(f"      üìÅ Arquivo: {output_filename}")
                logger.info(f"      üìè Tamanho: {len(image_data):,} bytes")
                if position_info.get('position'):
                    logger.info(f"      üìç Posi√ß√£o: {position_info['position']}")
                    logger.info(f"      üî¢ REF: {position_info['ref']}")
            
            logger.info(f"üéâ {len(images_extracted)} imagens extra√≠das!")
            return images_extracted
            
    except Exception as e:
        logger.error(f"‚ùå Erro na extra√ß√£o: {e}")
        return []

@app.route('/')
def serve_frontend():
    """Serve o frontend HTML seguindo orienta√ß√µes iniciais"""
    try:
        html_content = get_frontend_html()
        return html_content
    except Exception as e:
        logger.error(f"Erro ao servir frontend: {e}")
        return jsonify({'error': f'Erro interno: {e}'}), 500

def get_frontend_html():
    """Retorna o HTML do frontend seguindo orienta√ß√µes iniciais"""
    return f'''
<!DOCTYPE html>
<html lang="pt-BR">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>üöÄ Sistema Excel ‚Üí FTP (Orienta√ß√µes Iniciais)</title>
    <style>
        body {{
            font-family: Arial, sans-serif;
            background: #f0f0f0;
            margin: 0;
            padding: 20px;
        }}
        
        .container {{
            max-width: 800px;
            margin: 0 auto;
            background: white;
            padding: 30px;
            border-radius: 10px;
            box-shadow: 0 2px 10px rgba(0,0,0,0.1);
        }}
        
        h1 {{
            text-align: center;
            color: #333;
            margin-bottom: 30px;
        }}
        
        .config-info {{
            background: #e3f2fd;
            padding: 15px;
            border-radius: 5px;
            margin-bottom: 20px;
            border-left: 4px solid #2196f3;
        }}
        
        .upload-section {{
            text-align: center;
            margin-bottom: 30px;
        }}
        
        .btn {{
            background: #007bff;
            color: white;
            border: none;
            padding: 12px 24px;
            border-radius: 5px;
            cursor: pointer;
            margin: 10px;
            font-size: 16px;
        }}
        
        .btn:hover {{
            background: #0056b3;
        }}
        
        .btn:disabled {{
            background: #ccc;
            cursor: not-allowed;
        }}
        
        .btn-success {{
            background: #28a745;
        }}
        
        .btn-success:hover {{
            background: #1e7e34;
        }}
        
        .file-info {{
            background: #e9ecef;
            padding: 15px;
            border-radius: 5px;
            margin: 15px 0;
            text-align: center;
        }}
        
        .loading {{
            text-align: center;
            margin: 20px 0;
            color: #007bff;
            font-size: 18px;
            display: none;
        }}
        
        .loading-large {{
            text-align: center;
            margin: 20px 0;
            color: #007bff;
            font-size: 18px;
            padding: 30px;
            background: #f8f9fa;
            border-radius: 10px;
            border: 2px solid #007bff;
        }}
        
        .loading-large h3 {{
            margin: 15px 0;
            color: #0056b3;
        }}
        
        .loading-large p {{
            margin: 10px 0;
            color: #6c757d;
            font-size: 14px;
        }}
        
        .results {{
            margin-top: 30px;
            padding: 20px;
            border-radius: 5px;
            background: #f8f9fa;
            border: 2px solid #007bff;
            min-height: 100px;
        }}
        
        .success {{
            background: #d4edda;
            border: 1px solid #c3e6cb;
            color: #155724;
            padding: 15px;
            border-radius: 5px;
            margin-bottom: 20px;
        }}
        
        .error {{
            background: #f8d7da;
            border: 1px solid #f5c6cb;
            color: #721c24;
            padding: 15px;
            border-radius: 5px;
            margin-bottom: 20px;
        }}
        
        .stats {{
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(150px, 1fr));
            gap: 15px;
            margin-bottom: 20px;
        }}
        
        .stat-item {{
            background: white;
            padding: 15px;
            border-radius: 5px;
            text-align: center;
            border: 1px solid #dee2e6;
        }}
        
        .stat-value {{
            font-size: 24px;
            font-weight: bold;
            color: #007bff;
            margin-bottom: 5px;
        }}
        
        .stat-label {{
            color: #666;
            font-size: 14px;
        }}
        
        .uploaded-files {{
            background: white;
            border-radius: 5px;
            padding: 15px;
            margin-top: 15px;
        }}
        
        .file-item {{
            padding: 8px 12px;
            margin: 5px 0;
            background: #f8f9fa;
            border-radius: 3px;
            font-size: 14px;
        }}
        
        .file-item.success {{
            background: #d4edda;
            color: #155724;
        }}
        
        .file-item.error {{
            background: #f8d7da;
            color: #721c24;
        }}
        
        .url-link {{
            color: #007bff;
            text-decoration: none;
            font-weight: bold;
        }}
        
        .url-link:hover {{
            text-decoration: underline;
        }}
    </style>
</head>
<body>
    <div class="container">
        <h1>üöÄ Sistema Excel ‚Üí FTP</h1>
        <h2 style="text-align: center; color: #666; font-size: 18px;">Seguindo Orienta√ß√µes Iniciais do Projeto</h2>
        
        <div class="config-info">
            <h3>üìã Configura√ß√£o Atual:</h3>
            <p><strong>üåê Servidor FTP:</strong> {FTP_CONFIG['host']}</p>
            <p><strong>üë§ Usu√°rio:</strong> {FTP_CONFIG['user']}</p>
            <p><strong>üìÅ Diret√≥rio:</strong> {FTP_CONFIG['upload_dir']}</p>
            <p><strong>üîó URLs:</strong> {URLS_CONFIG['images_base']}</p>
            <p><strong>üìä Coluna REF:</strong> A | <strong>Coluna PHOTO:</strong> H | <strong>Linha inicial:</strong> 4</p>
        </div>
        
        <div class="upload-section">
            <input type="file" id="fileInput" accept=".xlsx" style="display: none;">
            <button class="btn" onclick="selectFile()">üìÅ Selecionar Arquivo Excel</button>
            <button class="btn btn-success" id="processBtn" onclick="processFile()" disabled>üöÄ Processar e Enviar para FTP</button>
        </div>
        
        <div id="fileInfo" class="file-info" style="display: none;"></div>
        
        <div class="loading" id="loading">
            ‚è≥ Processando arquivo e enviando para FTP...
        </div>
        
        <div class="results" id="results">
            <!-- Resultados ser√£o inseridos aqui -->
        </div>
    </div>

    <script>
        let selectedFile = null;
        
        function selectFile() {{
            document.getElementById('fileInput').click();
        }}
        
        document.getElementById('fileInput').addEventListener('change', function(e) {{
            const file = e.target.files[0];
            if (file) {{
                selectedFile = file;
                document.getElementById('processBtn').disabled = false;
                document.getElementById('fileInfo').style.display = 'block';
                document.getElementById('fileInfo').innerHTML = `üìÑ Arquivo selecionado: <strong>${{file.name}}</strong> (${{(file.size / 1024 / 1024).toFixed(2)}} MB)`;
            }}
        }});

        function processFile() {{
            if (!selectedFile) {{
                alert('Por favor, selecione um arquivo primeiro.');
                return;
            }}
            
            uploadFile(selectedFile);
        }}

        async function uploadFile(file) {{
            console.log('üöÄ Iniciando processamento:', file.name);
            
            const formData = new FormData();
            formData.append('file', file);
            
            const loading = document.getElementById('loading');
            const results = document.getElementById('results');
            
            // Mostrar loading com mensagem para arquivos grandes
            loading.style.display = 'block';
            results.innerHTML = '';
            
            // Verificar se √© arquivo grande (> 10MB)
            const fileSizeMB = file.size / (1024 * 1024);
            if (fileSizeMB > 10) {{
                loading.innerHTML = `
                    <div class="loading-large">
                        <div class="spinner"></div>
                        <h3>üîÑ Processando arquivo grande ({fileSizeMB.toFixed(1)} MB)</h3>
                        <p>‚è±Ô∏è Este processo pode levar alguns minutos...</p>
                        <p>üìä Extraindo imagens e enviando para FTP...</p>
                    </div>
                `;
            }}
            
            try {{
                console.log('üì° Enviando requisi√ß√£o...');
                const controller = new AbortController();
                const timeoutId = setTimeout(() => controller.abort(), 300000); // 5 minutos timeout
                
                const response = await fetch('/upload', {{
                    method: 'POST',
                    body: formData,
                    signal: controller.signal
                }});
                
                clearTimeout(timeoutId);
                
                console.log('üì° Resposta recebida:', response.status);
                
                if (!response.ok) {{
                    throw new Error(`HTTP ${{response.status}}: ${{response.statusText}}`);
                }}
                
                const data = await response.json();
                console.log('üìä Dados recebidos:', data);
                
                // Esconder loading
                loading.style.display = 'none';
                
                // Mostrar resultados
                displayResults(data);
                
            }} catch (error) {{
                console.error('‚ùå Erro no upload:', error);
                loading.style.display = 'none';
                displayError('Erro no processamento: ' + error.message);
            }}
        }}

        function displayResults(data) {{
            console.log('üé® Exibindo resultados:', data);
            
            const results = document.getElementById('results');
            
            let html = '';
            
            if (data.success) {{
                console.log('‚úÖ Processamento bem-sucedido');
                html += '<div class="success">‚úÖ Arquivo processado e imagens enviadas para FTP com sucesso!</div>';
                
                html += '<div class="stats">';
                html += `<div class="stat-item"><div class="stat-value">${{data.stats.total_images || 0}}</div><div class="stat-label">üñºÔ∏è Imagens extra√≠das</div></div>`;
                html += `<div class="stat-item"><div class="stat-value">${{data.stats.successful_uploads || 0}}</div><div class="stat-label">‚úÖ Uploads bem-sucedidos</div></div>`;
                html += `<div class="stat-item"><div class="stat-value">${{data.stats.failed_uploads || 0}}</div><div class="stat-label">‚ùå Uploads falharam</div></div>`;
                html += `<div class="stat-item"><div class="stat-value">${{(data.stats.total_size / 1024).toFixed(1)}} KB</div><div class="stat-label">üìè Total enviado</div></div>`;
                html += '</div>';
                
                if (data.uploaded_files && data.uploaded_files.length > 0) {{
                    html += '<div class="uploaded-files">';
                    html += '<div style="font-weight: bold; margin-bottom: 10px;">üìÅ Arquivos enviados para FTP:</div>';
                    
                    data.uploaded_files.forEach(file => {{
                        const url = `{URLS_CONFIG['images_base']}${{file.filename}}`;
                        html += `<div class="file-item success">‚úÖ ${{file.filename}} (${{(file.size / 1024).toFixed(1)}} KB) - REF: ${{file.ref}} - Pos: ${{file.position}}</div>`;
                        html += `<div style="margin-left: 20px; margin-bottom: 10px;"><a href="${{url}}" target="_blank" class="url-link">üîó ${{url}}</a></div>`;
                    }});
                    
                    html += '</div>';
                }}
                
                if (data.failed_files && data.failed_files.length > 0) {{
                    html += '<div class="uploaded-files">';
                    html += '<div style="font-weight: bold; margin-bottom: 10px;">‚ùå Arquivos com falha:</div>';
                    
                    data.failed_files.forEach(file => {{
                        html += `<div class="file-item error">‚ùå ${{file.filename}} - Erro: ${{file.error}}</div>`;
                    }});
                    
                    html += '</div>';
                }}
                
            }} else {{
                console.log('‚ùå Processamento falhou:', data.error);
                html += '<div class="error">‚ùå Erro no processamento: ' + (data.error || 'Erro desconhecido') + '</div>';
            }}
            
            console.log('üìù HTML gerado:', html);
            results.innerHTML = html;
            console.log('‚úÖ Resultados exibidos na tela');
        }}

        function displayError(message) {{
            console.log('‚ùå Exibindo erro:', message);
            const results = document.getElementById('results');
            results.innerHTML = '<div class="error">‚ùå ' + message + '</div>';
        }}
    </script>
</body>
</html>
    '''

@app.route('/upload', methods=['POST'])
def upload_file():
    """Processa upload de arquivo Excel e envia imagens para FTP seguindo orienta√ß√µes iniciais"""
    try:
        if 'file' not in request.files:
            return jsonify({'success': False, 'error': 'Nenhum arquivo enviado'}), 400
        
        file = request.files['file']
        
        if file.filename == '':
            return jsonify({'success': False, 'error': 'Nenhum arquivo selecionado'}), 400
        
        if not allowed_file(file.filename):
            return jsonify({'success': False, 'error': 'Tipo de arquivo n√£o permitido. Use apenas .xlsx'}), 400
        
        # Salvar arquivo temporariamente
        filename = secure_filename(file.filename)
        temp_path = os.path.join(UPLOAD_FOLDER, filename)
        file.save(temp_path)
        
        logger.info(f"Arquivo salvo temporariamente: {temp_path}")
        
        try:
            # 1. Extrair imagens do Excel
            images = extrair_imagens_do_excel(temp_path)
            
            if not images:
                return jsonify({
                    'success': False,
                    'error': 'Nenhuma imagem encontrada no arquivo'
                }), 400
            
            # 2. Conectar ao FTP e fazer upload seguindo orienta√ß√µes iniciais
            ftp_uploader = FTPUploaderOrientacoes(FTP_CONFIG)
            
            if not ftp_uploader.conectar():
                return jsonify({
                    'success': False,
                    'error': 'Falha na conex√£o com FTP'
                }), 500
            
            # 3. Fazer upload das imagens
            stats = {
                'total_images': len(images),
                'successful_uploads': 0,
                'failed_uploads': 0,
                'total_size': 0,
                'uploaded_files': [],
                'failed_files': []
            }
            
            for img in images:
                success = ftp_uploader.upload_imagem(img['image_data'], img['ftp_filename'])
                
                if success:
                    stats['successful_uploads'] += 1
                    stats['total_size'] += img['file_size']
                    stats['uploaded_files'].append({
                        'filename': img['ftp_filename'],
                        'size': img['file_size'],
                        'ref': img.get('ref', 'N/A'),
                        'position': img.get('position', 'N/A'),
                        'url': f"{URLS_CONFIG['images_base']}{img['ftp_filename']}"
                    })
                else:
                    stats['failed_uploads'] += 1
                    stats['failed_files'].append({
                        'filename': img['ftp_filename'],
                        'error': 'Erro no upload FTP'
                    })
            
            ftp_uploader.desconectar()
            
            # 4. Retornar resultado seguindo formato das orienta√ß√µes iniciais
            return jsonify({
                'success': stats['successful_uploads'] > 0,
                'stats': stats,
                'message': f"Processadas {stats['total_images']} imagens. {stats['successful_uploads']} enviadas com sucesso para FTP.",
                'images_base_url': URLS_CONFIG['images_base']
            })
                
        except Exception as e:
            logger.error(f"Erro no processamento: {e}")
            return jsonify({
                'success': False,
                'error': f'Erro no processamento: {str(e)}'
            }), 500
        
        finally:
            # Remover arquivo tempor√°rio
            try:
                os.remove(temp_path)
                logger.info(f"Arquivo tempor√°rio removido: {temp_path}")
            except Exception as e:
                logger.warning(f"Erro ao remover arquivo tempor√°rio: {e}")
    
    except Exception as e:
        logger.error(f"Erro no upload: {e}")
        return jsonify({'success': False, 'error': f'Erro interno: {str(e)}'}), 500

@app.route('/health')
def health_check():
    """Health check endpoint"""
    return jsonify({
        'status': 'healthy',
        'detector_integrado': DETECTOR_INTEGRADO_AVAILABLE,
        'ftp_config': {
            'host': FTP_CONFIG['host'],
            'user': FTP_CONFIG['user'],
            'upload_dir': FTP_CONFIG['upload_dir']
        },
        'urls_config': URLS_CONFIG,
        'timestamp': str(os.popen('date').read().strip())
    })

@app.route('/config')
def config():
    """Configura√ß√£o do sistema seguindo orienta√ß√µes iniciais"""
    return jsonify({
        'max_file_size': '50MB',
        'allowed_extensions': list(ALLOWED_EXTENSIONS),
        'upload_folder': UPLOAD_FOLDER,
        'detector_integrado': DETECTOR_INTEGRADO_AVAILABLE,
        'ftp_config': FTP_CONFIG,
        'urls_config': URLS_CONFIG,
        'invalid_refs': list(INVALID_REFS),
        'excel_config': {
            'ref_column': 'A',
            'photo_column': 'H',
            'start_row': 4
        },
        'python_version': sys.version,
        'working_directory': os.getcwd()
    })

if __name__ == '__main__':
    port = int(os.getenv('PORT', 8087))  # Porta diferente para evitar conflito
    debug = os.getenv('FLASK_ENV') != 'production'

    print("üöÄ SISTEMA FLASK SEGUINDO ORIENTA√á√ïES FTP INICIAIS")
    print("=" * 60)
    print(f"üìÅ Frontend: http://localhost:{port}")
    print(f"üíö Health: http://localhost:{port}/health")
    print(f"‚öôÔ∏è  Config: http://localhost:{port}/config")
    print("=" * 60)
    print("üîß Depend√™ncias:")
    print(f"   ‚Ä¢ Detector Integrado: {'‚úÖ' if DETECTOR_INTEGRADO_AVAILABLE else '‚ùå'}")
    print("=" * 60)
    print("üåê Configura√ß√£o FTP (Seguindo Orienta√ß√µes Iniciais):")
    print(f"   ‚Ä¢ Host: {FTP_CONFIG['host']}")
    print(f"   ‚Ä¢ Usu√°rio: {FTP_CONFIG['user']}")
    print(f"   ‚Ä¢ Diret√≥rio: {FTP_CONFIG['upload_dir']}")
    print(f"   ‚Ä¢ URLs: {URLS_CONFIG['images_base']}")
    print("=" * 60)
    print("üìä Configura√ß√£o Excel:")
    print(f"   ‚Ä¢ Coluna REF: A")
    print(f"   ‚Ä¢ Coluna PHOTO: H")
    print(f"   ‚Ä¢ Linha inicial: 4")
    print(f"   ‚Ä¢ REFs inv√°lidas: {len(INVALID_REFS)} palavras filtradas")
    print("=" * 60)

    if not DETECTOR_INTEGRADO_AVAILABLE:
        logger.error("‚ùå Detector integrado n√£o dispon√≠vel.")
        sys.exit(1)

    try:
        logger.info(f"‚úÖ Servidor Flask iniciado!")
        print(f"‚úÖ Servidor Flask iniciado!")
        print(f"üåê Acesse: http://localhost:{port}")
        print("üéØ Sistema configurado seguindo orienta√ß√µes iniciais do projeto!")
        app.run(host='0.0.0.0', port=port, debug=debug)
    except Exception as e:
        logger.error(f"‚ùå Erro ao iniciar servidor Flask: {e}")
        print(f"‚ùå Erro ao iniciar servidor Flask: {e}")
        sys.exit(1)
