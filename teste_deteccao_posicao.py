#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Teste espec√≠fico para verificar a detec√ß√£o de posi√ß√£o das imagens
"""

import openpyxl
import logging

# Configura√ß√£o de logging
logging.basicConfig(level=logging.DEBUG, format='%(asctime)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)

def testar_deteccao_posicao(file_path):
    """Testa a detec√ß√£o de posi√ß√£o das imagens"""
    print(f"üß™ Testando detec√ß√£o de posi√ß√£o: {file_path}")
    print("=" * 50)
    
    try:
        workbook = openpyxl.load_workbook(file_path)
        worksheet = workbook.active
        
        print(f"üìä Planilha: {worksheet.title}")
        print(f"üñºÔ∏è Total de imagens: {len(worksheet._images)}")
        
        if len(worksheet._images) == 0:
            print("‚ùå Nenhuma imagem para testar")
            return
        
        # Converte coluna H para n√∫mero
        photo_col_num = openpyxl.utils.column_index_from_string('H')
        print(f"üì∏ Coluna H = {photo_col_num}")
        
        # Testa cada imagem
        for i, image in enumerate(worksheet._images):
            print(f"\nüñºÔ∏è Imagem {i+1}:")
            
            anchor = image.anchor
            print(f"  Anchor: {anchor}")
            print(f"  Tipo anchor: {type(anchor)}")
            
            # Testa diferentes m√©todos de obten√ß√£o de posi√ß√£o
            row = None
            col = None
            metodo_usado = None
            
            # M√©todo 1: _from.row e _from.col
            if hasattr(anchor, '_from') and hasattr(anchor._from, 'row') and hasattr(anchor._from, 'col'):
                try:
                    row = anchor._from.row + 1
                    col = anchor._from.col + 1
                    metodo_usado = "M√©todo 1: _from.row e _from.col"
                    print(f"  ‚úÖ {metodo_usado}: linha {row}, coluna {col}")
                except Exception as e:
                    print(f"  ‚ùå {metodo_usado}: erro {e}")
            
            # M√©todo 2: _from como tupla
            elif hasattr(anchor, '_from') and isinstance(anchor._from, tuple) and len(anchor._from) >= 2:
                try:
                    row = anchor._from[0] + 1
                    col = anchor._from[1] + 1
                    metodo_usado = "M√©todo 2: _from como tupla"
                    print(f"  ‚úÖ {metodo_usado}: linha {row}, coluna {col}")
                except Exception as e:
                    print(f"  ‚ùå {metodo_usado}: erro {e}")
            
            # M√©todo 3: propriedades diretas
            elif hasattr(anchor, 'row') and hasattr(anchor, 'col'):
                try:
                    row = anchor.row + 1
                    col = anchor.col + 1
                    metodo_usado = "M√©todo 3: propriedades diretas"
                    print(f"  ‚úÖ {metodo_usado}: linha {row}, coluna {col}")
                except Exception as e:
                    print(f"  ‚ùå {metodo_usado}: erro {e}")
            
            else:
                print(f"  ‚ùå Nenhum m√©todo funcionou")
                print(f"  üîç Atributos do anchor: {[attr for attr in dir(anchor) if not attr.startswith('_')]}")
                if hasattr(anchor, '_from'):
                    print(f"  üîç _from: {anchor._from}")
                    print(f"  üîç Tipo _from: {type(anchor._from)}")
                    if hasattr(anchor._from, '__dict__'):
                        print(f"  üîç _from.__dict__: {anchor._from.__dict__}")
            
            # Se conseguiu obter posi√ß√£o, verifica crit√©rios
            if row and col:
                col_letter = openpyxl.utils.get_column_letter(col)
                print(f"  üìç Posi√ß√£o: {col_letter}{row}")
                
                # Verifica se est√° na coluna H
                if col == photo_col_num:
                    print(f"  ‚úÖ Est√° na coluna H (PHOTO)")
                else:
                    print(f"  ‚ùå Est√° na coluna {col_letter}, n√£o na H")
                
                # Verifica se est√° a partir da linha 4
                if row >= 4:
                    print(f"  ‚úÖ Est√° a partir da linha 4")
                else:
                    print(f"  ‚ùå Est√° antes da linha 4")
                
                # Verifica REF correspondente
                ref_value = worksheet[f'A{row}'].value
                if ref_value:
                    print(f"  üîç REF: {ref_value}")
                else:
                    print(f"  ‚ùå Sem REF na linha {row}")
                
                # RESULTADO FINAL
                if row >= 4 and col == photo_col_num:
                    print(f"  üéØ RESULTADO: IMAGEM V√ÅLIDA!")
                else:
                    print(f"  ‚ùå RESULTADO: Imagem n√£o atende aos crit√©rios")
            else:
                print(f"  ‚ùå N√£o foi poss√≠vel determinar a posi√ß√£o")
        
        workbook.close()
        
    except Exception as e:
        print(f"‚ùå Erro no teste: {e}")
        logger.error(f"Erro no teste de detec√ß√£o: {e}")

def main():
    """Fun√ß√£o principal"""
    # Testa arquivos com imagens
    arquivos_com_imagens = ['tartaruga.xlsx', 'carrinho.xlsx']
    
    for arquivo in arquivos_com_imagens:
        try:
            testar_deteccao_posicao(arquivo)
            print("\n" + "="*60 + "\n")
        except FileNotFoundError:
            print(f"‚ùå Arquivo {arquivo} n√£o encontrado")
        except Exception as e:
            print(f"‚ùå Erro ao processar {arquivo}: {e}")

if __name__ == "__main__":
    main()
